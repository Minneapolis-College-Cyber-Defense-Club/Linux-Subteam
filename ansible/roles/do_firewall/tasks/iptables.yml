---
- name: change default chain policy (used to clean rules)
  ansible.builtin.iptables:
    chain: INPUT
    policy: ACCEPT

- name: clean rules on all chains of filter table
  ansible.builtin.iptables:
    table: filter
    flush: yes

- name: delete all user-defined chains on filter table
  shell: iptables -t filter -X

- name: Allow to loopback interface
  ansible.builtin.iptables:
    in_interface: lo
    chain: INPUT
    jump: ACCEPT
    comment: loopback

- name: Allow established state
  ansible.builtin.iptables:
    chain: INPUT
    ctstate: ESTABLISHED
    jump: ACCEPT

- name: Allow ssh connection
  ansible.builtin.iptables:
    chain: INPUT
    src_range: "{{ subnet_range }}"
    protocol: tcp
    destination_port: '22'
    jump: ACCEPT
    comment: ssh

- name: Allow splunk connection
  ansible.builtin.iptables:
    chain: INPUT
    source: "{{ subnet_range }}"
    protocol: tcp
    destination_port: '8000'
    jump: ACCEPT
    comment: splunk
  when: inc_splunk_ports is defined

- name: disallow specific ports
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    source_port: "{{ item }}"
    jump: DROP
    comment: ftp
  with_items: [ '20', '21', '23' ]

- name: set default chain policy
  ansible.builtin.iptables:
    chain: INPUT
    policy: DROP

# ------- nat rules -------
- name: clean rules on all chains of nat table
  ansible.builtin.iptables:
    table: nat
    flush: yes

- name: delete all user-defined chains on nat table
  shell: iptables -t nat -X

- name: masquerade connection
  shell: iptables -t nat -A POSTROUTING -o ppp0 -j MASQUER

# save
- name: save iptables config to disk
  shell: service iptables save

# *filter
# # Setting up a "deny all-accept all" policy
# # Allow all outgoing, but deny/drop all incoming and forwarding traffic
# :INPUT DROP [0:0]
# :FORWARD DROP [0:0]
# :OUTPUT ACCEPT [0:0]

# # Custom per-protocol chains
# # Defining custom rules for UDP protocol.
# :UDP - [0:0]
# # Defining custom rules for TCP protocol.
# :TCP - [0:0]
# # Defining custom rules for ICMP protocol.
# :ICMP - [0:0]

# # Accept SSH TCP traffic to subnet only
# -A TCP -p tcp --dport 22 -s 172.20.240.0/22 -j ACCEPT

# # allow established to talk
# -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
# # allow loopback
# -A INPUT -i lo -j ACCEPT

# # splunk, uncomment if scoring engine is unhappy
# -A TCP -p tcp --dport 8000 -j ACCEPT
# #-A TCP -p tcp --dport 8089 -j ACCEPT
# #-A UDP -p udp --dport 514 -s 172.20.24.0/22 -j ACCEPT 

# # reject everything else
# # bad match
# -A INPUT -m conntrack --ctstate INVALID -j DROP
# -A INPUT -p udp -m conntrack --ctstate NEW -j UDP
# -A INPUT -p tcp --syn -m conntrack --ctstate NEW -j TCP
# -A INPUT -p icmp -m conntrack --ctstate NEW -j ICMP

# # reject anything
# -A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
# -A INPUT -p tcp -j REJECT --reject-with tcp-reset
# -A INPUT -j REJECT --reject-with icmp-proto-unreachable
# COMMIT