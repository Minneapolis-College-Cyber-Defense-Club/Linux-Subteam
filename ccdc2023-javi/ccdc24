#!/bin/bash


# Función para verificar si un paquete está instalado

paquetes=("sudo" "curl" "git" "kitty" "nano" "sudo" "zsh" "xclip" "python3" "bat" "lsd" "tldr" "iproute2" "net-tools" "iputils-ping" )


# Función para verificar si un paquete está instalado (Debian/Ubuntu/Kali)
paquete_instalado_apt() {  
    dpkg -l "$1" | grep -q '^ii'  
}

# Función para verificar si un paquete está instalado (CentOS/RHEL)
paquete_instalado_yum() {
    yum list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Fedora)
paquete_instalado_dnf() {
    dnf list installed "$1" &> /dev/null
}

# Función para verificar si un paquete está instalado (Arch Linux)
paquete_instalado_pacman() {
    pacman -Qi "$1" &> /dev/null
}

# Detectar el sistema operativo
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
fi

# Instalar paquetes basados en el sistema operativo
for paquete in "${paquetes[@]}"; do
    case $OS in
        "debian"|"ubuntu"|"kali")
            if ! paquete_instalado_apt "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo apt-get install -y "$paquete"
            fi
            ;;
        "centos"|"rhel")
            if ! paquete_instalado_yum "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo yum install -y "$paquete"
            fi
            ;;
        "fedora")
            if ! paquete_instalado_dnf "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo dnf install -y "$paquete"
            fi
            ;;
        "arch")
            if ! paquete_instalado_pacman "$paquete"; then
                echo "Instalando el paquete $paquete..."
                sudo pacman -S --noconfirm "$paquete"
            fi
            ;;
        *)
            ;;
    esac
done






function mktem() {
    new_dir=$(mktemp -d)
    echo "Directorio creado en: $new_dir"
    cd "$new_dir" || return
    echo "Cambiado al directorio: $PWD"
}




# Aquí puedes llamar a la función mktem
mktem

git clone https://github.com/4rji/4rji.git
cd 4rji/

./alias.sh

sudo cp -f binarios/* /usr/bin/

echo "binarios actualizados"
cd
echo ""
echo "Si hay: Error opening terminal: xterm-kitty, ejecutar:"
echo "export TERM=xterm"





#para instalar functions en las bash
echo ""
echo ""

# Pregunta al usuario
read -p "¿Quieres instalar las FUNCTION en la bash? (s/N): " respuesta

# Define un valor predeterminado si el usuario presiona Enter
respuesta=${respuesta:-N}

# Convierte la respuesta a minúsculas para facilitar la comparación
respuesta=$(echo $respuesta | tr '[:upper:]' '[:lower:]')

# Verifica la respuesta
if [ "$respuesta" == "s" ]; then
    echo "Ejecutando bashfun..."
    bashfun
    # Aquí colocas el código para ejecutar bashfun
else
    echo ""
fi

echo ""


# Pregunta al usuario
read -p "¿Quieres instalar todos ALIAS (s/N): " respuesta

# Define un valor predeterminado si el usuario presiona Enter
respuesta=${respuesta:-N}

# Convierte la respuesta a minúsculas para facilitar la comparación
respuesta=$(echo $respuesta | tr '[:upper:]' '[:lower:]')

# Verifica la respuesta
if [ "$respuesta" == "s" ]; then
    echo "instalando todos los alias... herralias"
    herralias
    # Aquí colocas el código para ejecutar bashfun
else
    echo ""
fi


echo ""

echo " ########### ALERTA.  #################"
echo ""
echo "Tarda mucho en instalarse"

echo ""

# Pregunta al usuario
read -p "¿Quieres instalar todos los paquetes de 2-arji (s/N): " respuesta

# Define un valor predeterminado si el usuario presiona Enter
respuesta=${respuesta:-N}

# Convierte la respuesta a minúsculas para facilitar la comparación
respuesta=$(echo $respuesta | tr '[:upper:]' '[:lower:]')

# Verifica la respuesta
if [ "$respuesta" == "s" ]; then
    echo "instalando todos los paquetes... 2-4rji"
    2-4rji
    # Aquí colocas el código para ejecutar bashfun
else
    echo ""
fi





